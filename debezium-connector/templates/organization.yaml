{{- if .Values.organizationService.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-organization-connector-config
  namespace: {{ .Values.organizationService.namespace }}
data:
  connector-config.json: |
    {
      "name": "organization-{{ .Values.base.name }}",
      "config": {
        "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
        "tasks.max": "1",
        "database.hostname": "{{ .Values.organizationService.database.hostname }}",
        "database.port": "{{ .Values.organizationService.database.port }}",
        "database.user": "{{ .Values.organizationService.database.username }}",
        "database.password": "@DATABASE_PASSWORD@",
        "database.dbname": "{{ .Values.organizationService.database.dbname }}",
        "database.server.name": "organization-db",
        "table.include.list": "core.message",
        "topic.prefix": "organization",
        "plugin.name": "pgoutput",
        "slot.name": "debezium_organization_slot",
        "publication.name": "debezium_organization_publication",
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": "true",
        "value.converter.schemas.enable": "true",
        "transforms": "messaging",
        "transforms.messaging.type": "org.cresplanex.core.cdc.debezium.TransactionalMessaging"
      }
    }
---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-organization-register-connector
  namespace: {{ .Values.organizationService.namespace }}
  labels:
    sidecar.istio.io/inject: "false"
spec:
  template:
    metadata:
      labels:
        sidecar.istio.io/inject: "false"
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.organizationService.database.passwordSecrets }}
                  key: {{ .Values.organizationService.database.passwordSecretKey }}
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until psql -h {{ .Values.organizationService.database.hostname }} -U {{ .Values.organizationService.database.username }} -d {{ .Values.organizationService.database.dbname }} -c "SELECT 1;" > /dev/null 2>&1; do
                echo "PostgreSQL is not ready. Retrying in 5 seconds..."
                sleep 5
              done
              echo "PostgreSQL is ready."
      containers:
        - name: register-connector
          image: bitnami/minideb:latest
          serviceAccountName: {{ .Values.organizationService.serviceAccount }}
          command:
            - sh
            - -c
            - |
              apt-get update && apt-get install -y curl jq && \
              echo "Replacing database password in connector config" && \
              REPLACE_PASSWORD=$(sed "s/@DATABASE_PASSWORD@/$PGPASSWORD/g" /app_scripts/connector-config.json) && \
              echo "Registering connector" && \
              curl -X POST -H "Content-Type: application/json" \
              --data "$REPLACE_PASSWORD" \
              http://{{ .Values.base.connector.connectHost }}:{{ .Values.base.connector.connectPort }}/connectors && \
              exit 0
          volumeMounts:
            - name: connector-config
              mountPath: /app_scripts
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.organizationService.database.passwordSecrets }}
                  key: {{ .Values.organizationService.database.passwordSecretKey }}
      volumes:
        - name: connector-config
          configMap:
            name: {{ .Release.Name }}-organization-connector-config
      {{- if .Values.organizationService.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.organizationService.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.organizationService.affinity }}
      affinity:
        {{- toYaml .Values.organizationService.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.organizationService.tolerations }}
      tolerations:
        {{- toYaml .Values.organizationService.tolerations | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
{{- end }}